{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khadi\\\\OneDrive\\\\Documents\\\\GitHub\\\\ADES\\\\frontEnd\\\\src\\\\components\\\\Quiz.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport Button from 'react-bootstrap/Button';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BadgeAdmin extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: []\n    };\n\n    this.handleRequirement = event => {\n      this.setState({\n        requirements: event.target.value\n      });\n    };\n\n    this.handleBadgeClassID = event => {\n      this.setState({\n        badgeClassID: event.target.value\n      });\n    };\n\n    this.handleURL = event => {\n      this.setState({\n        pic_url: event.target.files[0]\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault(); //data extraction (combining data)\n      // file upload\n\n      const storage = getStorage();\n      const storageRef = ref(storage, 'img/' + this.state.pic_url.name);\n      var file = this.state.pic_url; // Create file metadata including the content type\n\n      /** @type {any} */\n\n      const metadata = {\n        contentType: this.state.pic_url.type\n      };\n      console.log(\"yes\");\n      uploadBytes(storageRef, file, metadata);\n      getDownloadURL(storageRef).then(downloadURL => {\n        console.log('File available at', downloadURL);\n        const badge = {\n          name: this.state.name,\n          requirements: this.state.requirements,\n          pic_url: downloadURL,\n          badgeClassID: this.state.badgeClassID\n        };\n        console.log(\"BADGEEEE\" + JSON.stringify(badge));\n        const config = {\n          headers: {\n            'content-type': 'application/json'\n          }\n        };\n        axios.post('http://localhost:8081/newBadge', badge, config).then(res => {\n          console.log(res);\n          console.log(res.data);\n          window.location.reload();\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`http://localhost:8081/quiz`).then(res => {\n      console.log(res.data.length);\n      this.setState({\n        data: res.data\n      });\n      console.log(res.data[0]);\n\n      for (var i = 0; i < res.data.length; i++) {\n        var quiz = res.data[i];\n        console.log(\"quizid:\" + quiz.quizID);\n        console.log(\"total Marks:\" + quiz.totalMarks);\n        console.log(\"toalPoints:\" + quiz.totalPoints); //cpmplie the data that the card needs for its creation\n\n        var cardInfo = {\n          \"quizID\": quiz.quizID,\n          \"totalMarks\": quiz.totalMarks,\n          \"totalPoints\": quiz.totalPoints\n        };\n        console.log(\" -----------Card Info data pack-----------\");\n        console.log(cardInfo);\n        var newCard = createCard(cardInfo);\n        $('#users').append(newCard);\n      }\n    });\n\n    function createCard(cardInfo) {\n      console.log(cardInfo);\n      var card = `\n        <div class=\"card\" style=\" width:60% ;margin-right:10px;\">\n        <div class=\"card-body\">\n           \n           \n        </div> <p class=\"card-text\" style=\" font-size:20px;margin-left:20px\">Quiz ${cardInfo.quizID}</p>\n        <div style=\"margin-left:20px \"> \n        <div >\n            Total Marks:${cardInfo.totalMarks}\n        </div>\n        <div >\n            Total Points:${cardInfo.totalPoints}\n        </div>\n        <Link to={\"/EditBadge?id=${cardInfo.quizID}\"}>\n                      <Button>Do quiz</Button>\n                    </Link>\n        \n          </div>\n\n        \n         </div>\n            `;\n      return card;\n    }\n  } //NEED TO GET STUDENT ID!\n\n\n  render() {\n    const data = this.state.data;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"users\",\n      class: \"row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 1\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/khadi/OneDrive/Documents/GitHub/ADES/frontEnd/src/components/Quiz.js"],"names":["React","axios","Link","getStorage","ref","uploadBytes","getDownloadURL","Button","$","BadgeAdmin","Component","state","data","handleRequirement","event","setState","requirements","target","value","handleBadgeClassID","badgeClassID","handleURL","pic_url","files","handleSubmit","preventDefault","storage","storageRef","name","file","metadata","contentType","type","console","log","then","downloadURL","badge","JSON","stringify","config","headers","post","res","window","location","reload","componentDidMount","get","length","i","quiz","quizID","totalMarks","totalPoints","cardInfo","newCard","createCard","append","card","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport $ from 'jquery'; \r\n\r\nexport default class BadgeAdmin extends React.Component {\r\n  state = {\r\n    data: [],\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n      \r\n    axios.get(`http://localhost:8081/quiz`)\r\n      .then(res => {\r\n        console.log(res.data.length);\r\n        this.setState({ data: res.data });\r\n        console.log(res.data[0])\r\n        for (var i = 0; i < res.data.length; i++) {\r\n            var quiz = res.data[i];\r\n            console.log(\"quizid:\" + quiz.quizID);\r\n            console.log(\"total Marks:\" + quiz.totalMarks);\r\n            console.log(\"toalPoints:\" + quiz.totalPoints);\r\n            \r\n            //cpmplie the data that the card needs for its creation\r\n            var cardInfo = {\r\n                \"quizID\" : quiz.quizID,\r\n                \"totalMarks\" : quiz.totalMarks,\r\n                \"totalPoints\" : quiz.totalPoints\r\n               \r\n            }\r\n            console.log(\" -----------Card Info data pack-----------\");\r\n            console.log(cardInfo);\r\n\r\n\r\n\r\n            var newCard = createCard(cardInfo);\r\n            $('#users').append(newCard);\r\n       \r\n      }\r\n\r\n    \r\n    })\r\n\r\n    function createCard(cardInfo) {\r\n        console.log(cardInfo)\r\n        var card = `\r\n        <div class=\"card\" style=\" width:60% ;margin-right:10px;\">\r\n        <div class=\"card-body\">\r\n           \r\n           \r\n        </div> <p class=\"card-text\" style=\" font-size:20px;margin-left:20px\">Quiz ${cardInfo.quizID}</p>\r\n        <div style=\"margin-left:20px \"> \r\n        <div >\r\n            Total Marks:${cardInfo.totalMarks}\r\n        </div>\r\n        <div >\r\n            Total Points:${cardInfo.totalPoints}\r\n        </div>\r\n        <Link to={\"/EditBadge?id=${cardInfo.quizID}\"}>\r\n                      <Button>Do quiz</Button>\r\n                    </Link>\r\n        \r\n          </div>\r\n\r\n        \r\n         </div>\r\n            `;\r\n\r\n        return card;\r\n    }\r\n\r\n\r\n\r\n   \r\n  }\r\n\r\n //NEED TO GET STUDENT ID!\r\n \r\n\r\n  handleRequirement = event => {\r\n    this.setState({ requirements: event.target.value });\r\n  }\r\n\r\n  handleBadgeClassID = event => {\r\n    this.setState({ badgeClassID: event.target.value });\r\n  }\r\n\r\n  handleURL = event => {\r\n    this.setState({ pic_url: event.target.files[0], });\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    //data extraction (combining data)\r\n    // file upload\r\n    const storage = getStorage();\r\n    const storageRef = ref(storage, 'img/' + this.state.pic_url.name);\r\n    var file = this.state.pic_url;\r\n    // Create file metadata including the content type\r\n    /** @type {any} */\r\n    const metadata = {\r\n      contentType: this.state.pic_url.type,\r\n    };\r\n    console.log(\"yes\");\r\n    uploadBytes(storageRef, file, metadata);\r\n\r\n    getDownloadURL(storageRef).then((downloadURL) => {\r\n      console.log('File available at', downloadURL);\r\n\r\n      const badge = {\r\n        name: this.state.name,\r\n        requirements: this.state.requirements,\r\n        pic_url: downloadURL,\r\n        badgeClassID: this.state.badgeClassID\r\n      };\r\n      console.log(\"BADGEEEE\" + JSON.stringify(badge))\r\n\r\n      const config = {\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        }\r\n      }\r\n      axios.post('http://localhost:8081/newBadge', badge, config)\r\n        .then(res => {\r\n          console.log(res);\r\n          console.log(res.data);\r\n          window.location.reload();\r\n        })\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n      \r\n    const data = this.state.data;\r\n    \r\n    return (\r\n<div id=\"users\" class=\"row\">\r\n\r\n\r\n</div>\r\n      \r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}