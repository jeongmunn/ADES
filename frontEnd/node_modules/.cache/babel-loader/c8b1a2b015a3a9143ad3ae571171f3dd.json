{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serialize = void 0;\n\nvar buffer_writer_1 = require(\"./buffer-writer\");\n\nvar writer = new buffer_writer_1.Writer();\n\nvar startup = function startup(opts) {\n  // protocol version\n  writer.addInt16(3).addInt16(0);\n\n  for (var _i = 0, _Object$keys = Object.keys(opts); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    writer.addCString(key).addCString(opts[key]);\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8');\n  var bodyBuffer = writer.addCString('').flush(); // this message is sent without a code\n\n  var length = bodyBuffer.length + 4;\n  return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\n};\n\nvar requestSsl = function requestSsl() {\n  var response = Buffer.allocUnsafe(8);\n  response.writeInt32BE(8, 0);\n  response.writeInt32BE(80877103, 4);\n  return response;\n};\n\nvar password = function password(_password) {\n  return writer.addCString(_password).flush(112\n  /* startup */\n  );\n};\n\nvar sendSASLInitialResponseMessage = function sendSASLInitialResponseMessage(mechanism, initialResponse) {\n  // 0x70 = 'p'\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n  return writer.flush(112\n  /* startup */\n  );\n};\n\nvar sendSCRAMClientFinalMessage = function sendSCRAMClientFinalMessage(additionalData) {\n  return writer.addString(additionalData).flush(112\n  /* startup */\n  );\n};\n\nvar query = function query(text) {\n  return writer.addCString(text).flush(81\n  /* query */\n  );\n};\n\nvar emptyArray = [];\n\nvar parse = function parse(query) {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n  // normalize missing query names to allow for null\n  var name = query.name || '';\n\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.');\n    console.error('You supplied %s (%s)', name, name.length);\n    console.error('This can cause conflicts and silent errors executing queries');\n    /* eslint-enable no-console */\n  }\n\n  var types = query.types || emptyArray;\n  var len = types.length;\n  var buffer = writer.addCString(name) // name of query\n  .addCString(query.text) // actual query text\n  .addInt16(len);\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(types[i]);\n  }\n\n  return writer.flush(80\n  /* parse */\n  );\n};\n\nvar paramWriter = new buffer_writer_1.Writer();\n\nvar writeValues = function writeValues(values, valueMapper) {\n  for (var i = 0; i < values.length; i++) {\n    var mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n\n    if (mappedVal == null) {\n      // add the param type (string) to the writer\n      writer.addInt16(0\n      /* STRING */\n      ); // write -1 to the param writer to indicate null\n\n      paramWriter.addInt32(-1);\n    } else if (mappedVal instanceof Buffer) {\n      // add the param type (binary) to the writer\n      writer.addInt16(1\n      /* BINARY */\n      ); // add the buffer to the param writer\n\n      paramWriter.addInt32(mappedVal.length);\n      paramWriter.add(mappedVal);\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(0\n      /* STRING */\n      );\n      paramWriter.addInt32(Buffer.byteLength(mappedVal));\n      paramWriter.addString(mappedVal);\n    }\n  }\n};\n\nvar bind = function bind() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // normalize config\n  var portal = config.portal || '';\n  var statement = config.statement || '';\n  var binary = config.binary || false;\n  var values = config.values || emptyArray;\n  var len = values.length;\n  writer.addCString(portal).addCString(statement);\n  writer.addInt16(len);\n  writeValues(values, config.valueMapper);\n  writer.addInt16(len);\n  writer.add(paramWriter.flush()); // format code\n\n  writer.addInt16(binary ? 1\n  /* BINARY */\n  : 0\n  /* STRING */\n  );\n  return writer.flush(66\n  /* bind */\n  );\n};\n\nvar emptyExecute = Buffer.from([69\n/* execute */\n, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\n\nvar execute = function execute(config) {\n  // this is the happy path for most queries\n  if (!config || !config.portal && !config.rows) {\n    return emptyExecute;\n  }\n\n  var portal = config.portal || '';\n  var rows = config.rows || 0;\n  var portalLength = Buffer.byteLength(portal);\n  var len = 4 + portalLength + 1 + 4; // one extra bit for code\n\n  var buff = Buffer.allocUnsafe(1 + len);\n  buff[0] = 69\n  /* execute */\n  ;\n  buff.writeInt32BE(len, 1);\n  buff.write(portal, 5, 'utf-8');\n  buff[portalLength + 5] = 0; // null terminate portal cString\n\n  buff.writeUInt32BE(rows, buff.length - 4);\n  return buff;\n};\n\nvar cancel = function cancel(processID, secretKey) {\n  var buffer = Buffer.allocUnsafe(16);\n  buffer.writeInt32BE(16, 0);\n  buffer.writeInt16BE(1234, 4);\n  buffer.writeInt16BE(5678, 6);\n  buffer.writeInt32BE(processID, 8);\n  buffer.writeInt32BE(secretKey, 12);\n  return buffer;\n};\n\nvar cstringMessage = function cstringMessage(code, string) {\n  var stringLen = Buffer.byteLength(string);\n  var len = 4 + stringLen + 1; // one extra bit for code\n\n  var buffer = Buffer.allocUnsafe(1 + len);\n  buffer[0] = code;\n  buffer.writeInt32BE(len, 1);\n  buffer.write(string, 5, 'utf-8');\n  buffer[len] = 0; // null terminate cString\n\n  return buffer;\n};\n\nvar emptyDescribePortal = writer.addCString('P').flush(68\n/* describe */\n);\nvar emptyDescribeStatement = writer.addCString('S').flush(68\n/* describe */\n);\n\nvar describe = function describe(msg) {\n  return msg.name ? cstringMessage(68\n  /* describe */\n  , \"\".concat(msg.type).concat(msg.name || '')) : msg.type === 'P' ? emptyDescribePortal : emptyDescribeStatement;\n};\n\nvar close = function close(msg) {\n  var text = \"\".concat(msg.type).concat(msg.name || '');\n  return cstringMessage(67\n  /* close */\n  , text);\n};\n\nvar copyData = function copyData(chunk) {\n  return writer.add(chunk).flush(100\n  /* copyFromChunk */\n  );\n};\n\nvar copyFail = function copyFail(message) {\n  return cstringMessage(102\n  /* copyFail */\n  , message);\n};\n\nvar codeOnlyBuffer = function codeOnlyBuffer(code) {\n  return Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\n};\n\nvar flushBuffer = codeOnlyBuffer(72\n/* flush */\n);\nvar syncBuffer = codeOnlyBuffer(83\n/* sync */\n);\nvar endBuffer = codeOnlyBuffer(88\n/* end */\n);\nvar copyDoneBuffer = codeOnlyBuffer(99\n/* copyDone */\n);\nvar serialize = {\n  startup: startup,\n  password: password,\n  requestSsl: requestSsl,\n  sendSASLInitialResponseMessage: sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage: sendSCRAMClientFinalMessage,\n  query: query,\n  parse: parse,\n  bind: bind,\n  execute: execute,\n  describe: describe,\n  close: close,\n  flush: function flush() {\n    return flushBuffer;\n  },\n  sync: function sync() {\n    return syncBuffer;\n  },\n  end: function end() {\n    return endBuffer;\n  },\n  copyData: copyData,\n  copyDone: function copyDone() {\n    return copyDoneBuffer;\n  },\n  copyFail: copyFail,\n  cancel: cancel\n};\nexports.serialize = serialize;","map":{"version":3,"sources":["../src/serializer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.serialize = void 0;\r\nconst buffer_writer_1 = require(\"./buffer-writer\");\r\nconst writer = new buffer_writer_1.Writer();\r\nconst startup = (opts) => {\r\n    // protocol version\r\n    writer.addInt16(3).addInt16(0);\r\n    for (const key of Object.keys(opts)) {\r\n        writer.addCString(key).addCString(opts[key]);\r\n    }\r\n    writer.addCString('client_encoding').addCString('UTF8');\r\n    var bodyBuffer = writer.addCString('').flush();\r\n    // this message is sent without a code\r\n    var length = bodyBuffer.length + 4;\r\n    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\r\n};\r\nconst requestSsl = () => {\r\n    const response = Buffer.allocUnsafe(8);\r\n    response.writeInt32BE(8, 0);\r\n    response.writeInt32BE(80877103, 4);\r\n    return response;\r\n};\r\nconst password = (password) => {\r\n    return writer.addCString(password).flush(112 /* startup */);\r\n};\r\nconst sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\r\n    // 0x70 = 'p'\r\n    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\r\n    return writer.flush(112 /* startup */);\r\n};\r\nconst sendSCRAMClientFinalMessage = function (additionalData) {\r\n    return writer.addString(additionalData).flush(112 /* startup */);\r\n};\r\nconst query = (text) => {\r\n    return writer.addCString(text).flush(81 /* query */);\r\n};\r\nconst emptyArray = [];\r\nconst parse = (query) => {\r\n    // expect something like this:\r\n    // { name: 'queryName',\r\n    //   text: 'select * from blah',\r\n    //   types: ['int8', 'bool'] }\r\n    // normalize missing query names to allow for null\r\n    const name = query.name || '';\r\n    if (name.length > 63) {\r\n        /* eslint-disable no-console */\r\n        console.error('Warning! Postgres only supports 63 characters for query names.');\r\n        console.error('You supplied %s (%s)', name, name.length);\r\n        console.error('This can cause conflicts and silent errors executing queries');\r\n        /* eslint-enable no-console */\r\n    }\r\n    const types = query.types || emptyArray;\r\n    var len = types.length;\r\n    var buffer = writer\r\n        .addCString(name) // name of query\r\n        .addCString(query.text) // actual query text\r\n        .addInt16(len);\r\n    for (var i = 0; i < len; i++) {\r\n        buffer.addInt32(types[i]);\r\n    }\r\n    return writer.flush(80 /* parse */);\r\n};\r\nconst paramWriter = new buffer_writer_1.Writer();\r\nconst writeValues = function (values, valueMapper) {\r\n    for (let i = 0; i < values.length; i++) {\r\n        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\r\n        if (mappedVal == null) {\r\n            // add the param type (string) to the writer\r\n            writer.addInt16(0 /* STRING */);\r\n            // write -1 to the param writer to indicate null\r\n            paramWriter.addInt32(-1);\r\n        }\r\n        else if (mappedVal instanceof Buffer) {\r\n            // add the param type (binary) to the writer\r\n            writer.addInt16(1 /* BINARY */);\r\n            // add the buffer to the param writer\r\n            paramWriter.addInt32(mappedVal.length);\r\n            paramWriter.add(mappedVal);\r\n        }\r\n        else {\r\n            // add the param type (string) to the writer\r\n            writer.addInt16(0 /* STRING */);\r\n            paramWriter.addInt32(Buffer.byteLength(mappedVal));\r\n            paramWriter.addString(mappedVal);\r\n        }\r\n    }\r\n};\r\nconst bind = (config = {}) => {\r\n    // normalize config\r\n    const portal = config.portal || '';\r\n    const statement = config.statement || '';\r\n    const binary = config.binary || false;\r\n    const values = config.values || emptyArray;\r\n    const len = values.length;\r\n    writer.addCString(portal).addCString(statement);\r\n    writer.addInt16(len);\r\n    writeValues(values, config.valueMapper);\r\n    writer.addInt16(len);\r\n    writer.add(paramWriter.flush());\r\n    // format code\r\n    writer.addInt16(binary ? 1 /* BINARY */ : 0 /* STRING */);\r\n    return writer.flush(66 /* bind */);\r\n};\r\nconst emptyExecute = Buffer.from([69 /* execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\r\nconst execute = (config) => {\r\n    // this is the happy path for most queries\r\n    if (!config || (!config.portal && !config.rows)) {\r\n        return emptyExecute;\r\n    }\r\n    const portal = config.portal || '';\r\n    const rows = config.rows || 0;\r\n    const portalLength = Buffer.byteLength(portal);\r\n    const len = 4 + portalLength + 1 + 4;\r\n    // one extra bit for code\r\n    const buff = Buffer.allocUnsafe(1 + len);\r\n    buff[0] = 69 /* execute */;\r\n    buff.writeInt32BE(len, 1);\r\n    buff.write(portal, 5, 'utf-8');\r\n    buff[portalLength + 5] = 0; // null terminate portal cString\r\n    buff.writeUInt32BE(rows, buff.length - 4);\r\n    return buff;\r\n};\r\nconst cancel = (processID, secretKey) => {\r\n    const buffer = Buffer.allocUnsafe(16);\r\n    buffer.writeInt32BE(16, 0);\r\n    buffer.writeInt16BE(1234, 4);\r\n    buffer.writeInt16BE(5678, 6);\r\n    buffer.writeInt32BE(processID, 8);\r\n    buffer.writeInt32BE(secretKey, 12);\r\n    return buffer;\r\n};\r\nconst cstringMessage = (code, string) => {\r\n    const stringLen = Buffer.byteLength(string);\r\n    const len = 4 + stringLen + 1;\r\n    // one extra bit for code\r\n    const buffer = Buffer.allocUnsafe(1 + len);\r\n    buffer[0] = code;\r\n    buffer.writeInt32BE(len, 1);\r\n    buffer.write(string, 5, 'utf-8');\r\n    buffer[len] = 0; // null terminate cString\r\n    return buffer;\r\n};\r\nconst emptyDescribePortal = writer.addCString('P').flush(68 /* describe */);\r\nconst emptyDescribeStatement = writer.addCString('S').flush(68 /* describe */);\r\nconst describe = (msg) => {\r\n    return msg.name\r\n        ? cstringMessage(68 /* describe */, `${msg.type}${msg.name || ''}`)\r\n        : msg.type === 'P'\r\n            ? emptyDescribePortal\r\n            : emptyDescribeStatement;\r\n};\r\nconst close = (msg) => {\r\n    const text = `${msg.type}${msg.name || ''}`;\r\n    return cstringMessage(67 /* close */, text);\r\n};\r\nconst copyData = (chunk) => {\r\n    return writer.add(chunk).flush(100 /* copyFromChunk */);\r\n};\r\nconst copyFail = (message) => {\r\n    return cstringMessage(102 /* copyFail */, message);\r\n};\r\nconst codeOnlyBuffer = (code) => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\r\nconst flushBuffer = codeOnlyBuffer(72 /* flush */);\r\nconst syncBuffer = codeOnlyBuffer(83 /* sync */);\r\nconst endBuffer = codeOnlyBuffer(88 /* end */);\r\nconst copyDoneBuffer = codeOnlyBuffer(99 /* copyDone */);\r\nconst serialize = {\r\n    startup,\r\n    password,\r\n    requestSsl,\r\n    sendSASLInitialResponseMessage,\r\n    sendSCRAMClientFinalMessage,\r\n    query,\r\n    parse,\r\n    bind,\r\n    execute,\r\n    describe,\r\n    close,\r\n    flush: () => flushBuffer,\r\n    sync: () => syncBuffer,\r\n    end: () => endBuffer,\r\n    copyData,\r\n    copyDone: () => copyDoneBuffer,\r\n    copyFail,\r\n    cancel,\r\n};\r\nexports.serialize = serialize;\r\n//# sourceMappingURL=serializer.js.map"]},"metadata":{},"sourceType":"script"}