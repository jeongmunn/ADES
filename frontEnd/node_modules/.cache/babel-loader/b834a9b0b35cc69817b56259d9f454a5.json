{"ast":null,"code":"\"use strict\"; //binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nvar _classCallCheck = require(\"C:/Users/jw/OneDrive/Documents/GitHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jw/OneDrive/Documents/GitHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Writer = void 0;\n\nvar Writer = /*#__PURE__*/function () {\n  function Writer() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;\n\n    _classCallCheck(this, Writer);\n\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(size);\n  }\n\n  _createClass(Writer, [{\n    key: \"ensure\",\n    value: function ensure(size) {\n      var remaining = this.buffer.length - this.offset;\n\n      if (remaining < size) {\n        var oldBuffer = this.buffer; // exponential growth factor of around ~ 1.5\n        // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n\n        var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n        this.buffer = Buffer.allocUnsafe(newSize);\n        oldBuffer.copy(this.buffer);\n      }\n    }\n  }, {\n    key: \"addInt32\",\n    value: function addInt32(num) {\n      this.ensure(4);\n      this.buffer[this.offset++] = num >>> 24 & 0xff;\n      this.buffer[this.offset++] = num >>> 16 & 0xff;\n      this.buffer[this.offset++] = num >>> 8 & 0xff;\n      this.buffer[this.offset++] = num >>> 0 & 0xff;\n      return this;\n    }\n  }, {\n    key: \"addInt16\",\n    value: function addInt16(num) {\n      this.ensure(2);\n      this.buffer[this.offset++] = num >>> 8 & 0xff;\n      this.buffer[this.offset++] = num >>> 0 & 0xff;\n      return this;\n    }\n  }, {\n    key: \"addCString\",\n    value: function addCString(string) {\n      if (!string) {\n        this.ensure(1);\n      } else {\n        var len = Buffer.byteLength(string);\n        this.ensure(len + 1); // +1 for null terminator\n\n        this.buffer.write(string, this.offset, 'utf-8');\n        this.offset += len;\n      }\n\n      this.buffer[this.offset++] = 0; // null terminator\n\n      return this;\n    }\n  }, {\n    key: \"addString\",\n    value: function addString() {\n      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var len = Buffer.byteLength(string);\n      this.ensure(len);\n      this.buffer.write(string, this.offset);\n      this.offset += len;\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(otherBuffer) {\n      this.ensure(otherBuffer.length);\n      otherBuffer.copy(this.buffer, this.offset);\n      this.offset += otherBuffer.length;\n      return this;\n    }\n  }, {\n    key: \"join\",\n    value: function join(code) {\n      if (code) {\n        this.buffer[this.headerPosition] = code; //length is everything in this packet minus the code\n\n        var length = this.offset - (this.headerPosition + 1);\n        this.buffer.writeInt32BE(length, this.headerPosition + 1);\n      }\n\n      return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush(code) {\n      var result = this.join(code);\n      this.offset = 5;\n      this.headerPosition = 0;\n      this.buffer = Buffer.allocUnsafe(this.size);\n      return result;\n    }\n  }]);\n\n  return Writer;\n}();\n\nexports.Writer = Writer;","map":{"version":3,"sources":["../src/buffer-writer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Writer = void 0;\r\nclass Writer {\r\n    constructor(size = 256) {\r\n        this.size = size;\r\n        this.offset = 5;\r\n        this.headerPosition = 0;\r\n        this.buffer = Buffer.allocUnsafe(size);\r\n    }\r\n    ensure(size) {\r\n        var remaining = this.buffer.length - this.offset;\r\n        if (remaining < size) {\r\n            var oldBuffer = this.buffer;\r\n            // exponential growth factor of around ~ 1.5\r\n            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\r\n            var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\r\n            this.buffer = Buffer.allocUnsafe(newSize);\r\n            oldBuffer.copy(this.buffer);\r\n        }\r\n    }\r\n    addInt32(num) {\r\n        this.ensure(4);\r\n        this.buffer[this.offset++] = (num >>> 24) & 0xff;\r\n        this.buffer[this.offset++] = (num >>> 16) & 0xff;\r\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\r\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\r\n        return this;\r\n    }\r\n    addInt16(num) {\r\n        this.ensure(2);\r\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\r\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\r\n        return this;\r\n    }\r\n    addCString(string) {\r\n        if (!string) {\r\n            this.ensure(1);\r\n        }\r\n        else {\r\n            var len = Buffer.byteLength(string);\r\n            this.ensure(len + 1); // +1 for null terminator\r\n            this.buffer.write(string, this.offset, 'utf-8');\r\n            this.offset += len;\r\n        }\r\n        this.buffer[this.offset++] = 0; // null terminator\r\n        return this;\r\n    }\r\n    addString(string = '') {\r\n        var len = Buffer.byteLength(string);\r\n        this.ensure(len);\r\n        this.buffer.write(string, this.offset);\r\n        this.offset += len;\r\n        return this;\r\n    }\r\n    add(otherBuffer) {\r\n        this.ensure(otherBuffer.length);\r\n        otherBuffer.copy(this.buffer, this.offset);\r\n        this.offset += otherBuffer.length;\r\n        return this;\r\n    }\r\n    join(code) {\r\n        if (code) {\r\n            this.buffer[this.headerPosition] = code;\r\n            //length is everything in this packet minus the code\r\n            const length = this.offset - (this.headerPosition + 1);\r\n            this.buffer.writeInt32BE(length, this.headerPosition + 1);\r\n        }\r\n        return this.buffer.slice(code ? 0 : 5, this.offset);\r\n    }\r\n    flush(code) {\r\n        var result = this.join(code);\r\n        this.offset = 5;\r\n        this.headerPosition = 0;\r\n        this.buffer = Buffer.allocUnsafe(this.size);\r\n        return result;\r\n    }\r\n}\r\nexports.Writer = Writer;\r\n//# sourceMappingURL=buffer-writer.js.map"]},"metadata":{},"sourceType":"script"}