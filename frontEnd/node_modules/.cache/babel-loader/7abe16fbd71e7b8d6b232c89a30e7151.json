{"ast":null,"code":"import _defineProperty from \"C:/Users/User/Documents/GitHub/ADES/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/User/Documents/GitHub/ADES/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/User/Documents/GitHub/ADES/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\r\n * This function create an object from keys, value and then assign to target\r\n *\r\n * @param {Object} obj : the target object to be assigned\r\n * @param {string[]} keys\r\n * @param {string | number} value\r\n *\r\n * @example\r\n * const source = {}\r\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\r\n *\r\n * @example\r\n * const source = { palette: { primary: 'var(--palette-primary)' } }\r\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\r\n */\n\nexport var assignNestedKeys = function assignNestedKeys(obj, keys, value) {\n  var temp = obj;\n  keys.forEach(function (k, index) {\n    if (index === keys.length - 1) {\n      if (temp && typeof temp === 'object') {\n        temp[k] = value;\n      }\n    } else if (temp && typeof temp === 'object') {\n      if (!temp[k]) {\n        temp[k] = {};\n      }\n\n      temp = temp[k];\n    }\n  });\n};\n/**\r\n *\r\n * @param {Object} obj : source object\r\n * @param {Function} callback : a function that will be called when\r\n *                   - the deepest key in source object is reached\r\n *                   - the value of the deepest key is NOT `undefined` | `null`\r\n *\r\n * @example\r\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\r\n * // ['palette', 'primary', 'main'] '#000000'\r\n */\n\nexport var walkObjectDeep = function walkObjectDeep(obj, callback) {\n  function recurse(object) {\n    var parentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    Object.entries(object).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      if (value !== undefined && value !== null) {\n        if (typeof value === 'object' && Object.keys(value).length > 0) {\n          recurse(value, [].concat(_toConsumableArray(parentKeys), [key]));\n        } else {\n          callback([].concat(_toConsumableArray(parentKeys), [key]), value, object);\n        }\n      }\n    });\n  }\n\n  recurse(obj);\n};\n\nvar getCssValue = function getCssValue(keys, value) {\n  if (typeof value === 'number') {\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(function (prop) {\n      return keys.includes(prop);\n    })) {\n      // css property that are unitless\n      return value;\n    }\n\n    return \"\".concat(value, \"px\");\n  }\n\n  return value;\n};\n/**\r\n * a function that parse theme and return { css, vars }\r\n *\r\n * @param {Object} theme\r\n * @param {{\r\n *  prefix?: string,\r\n *  basePrefix?: string,\r\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\r\n * }} options.\r\n *  `basePrefix`: defined by design system.\r\n *  `prefix`: defined by application\r\n *\r\n *   This function also mutate the string value of theme input by replacing `basePrefix` (if existed) with `prefix`\r\n *\r\n * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme)\r\n *\r\n * @example\r\n * const { css, vars } = parser({\r\n *   fontSize: 12,\r\n *   lineHeight: 1.2,\r\n *   palette: { primary: { 500: '#000000' } }\r\n * })\r\n *\r\n * console.log(css) // { '--fontSize': '12px', '--lineHeight': 1.2, '--palette-primary-500': '#000000' }\r\n * console.log(vars) // { fontSize: '--fontSize', lineHeight: '--lineHeight', palette: { primary: { 500: 'var(--palette-primary-500)' } } }\r\n */\n\n\nexport default function cssVarsParser(theme, options) {\n  var clonedTheme = _extends({}, theme);\n\n  delete clonedTheme.vars; // remove 'vars' from the structure\n\n  var _ref3 = options || {},\n      prefix = _ref3.prefix,\n      _ref3$basePrefix = _ref3.basePrefix,\n      basePrefix = _ref3$basePrefix === void 0 ? '' : _ref3$basePrefix,\n      shouldSkipGeneratingVar = _ref3.shouldSkipGeneratingVar;\n\n  var css = {};\n  var vars = {};\n  walkObjectDeep(clonedTheme, function (keys, val, scope) {\n    if (typeof val === 'string' || typeof val === 'number') {\n      var value = val;\n\n      if (typeof value === 'string' && value.startsWith('var')) {\n        // replace the value of the `scope` object with the prefix or remove basePrefix from the value\n        value = prefix ? value.replace(basePrefix, prefix) : value.replace(\"\".concat(basePrefix, \"-\"), ''); // scope is the deepest object in the tree, keys is the theme path keys\n\n        scope[keys.slice(-1)[0]] = value;\n      }\n\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\n        // only create css & var if `shouldSkipGeneratingVar` return false\n        var cssVar = \"--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(keys.join('-'));\n        Object.assign(css, _defineProperty({}, cssVar, getCssValue(keys, value)));\n        assignNestedKeys(vars, keys, \"var(\".concat(cssVar, \")\"));\n      }\n    }\n  });\n  return {\n    css: css,\n    vars: vars\n  };\n}","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/ADES/frontEnd/node_modules/@mui/system/esm/cssVars/cssVarsParser.js"],"names":["_extends","assignNestedKeys","obj","keys","value","temp","forEach","k","index","length","walkObjectDeep","callback","recurse","object","parentKeys","Object","entries","key","undefined","getCssValue","some","prop","includes","cssVarsParser","theme","options","clonedTheme","vars","prefix","basePrefix","shouldSkipGeneratingVar","css","val","scope","startsWith","replace","slice","cssVar","join","assign"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\n\r\n/**\r\n * This function create an object from keys, value and then assign to target\r\n *\r\n * @param {Object} obj : the target object to be assigned\r\n * @param {string[]} keys\r\n * @param {string | number} value\r\n *\r\n * @example\r\n * const source = {}\r\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\r\n *\r\n * @example\r\n * const source = { palette: { primary: 'var(--palette-primary)' } }\r\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\r\n */\r\nexport const assignNestedKeys = (obj, keys, value) => {\r\n  let temp = obj;\r\n  keys.forEach((k, index) => {\r\n    if (index === keys.length - 1) {\r\n      if (temp && typeof temp === 'object') {\r\n        temp[k] = value;\r\n      }\r\n    } else if (temp && typeof temp === 'object') {\r\n      if (!temp[k]) {\r\n        temp[k] = {};\r\n      }\r\n\r\n      temp = temp[k];\r\n    }\r\n  });\r\n};\r\n/**\r\n *\r\n * @param {Object} obj : source object\r\n * @param {Function} callback : a function that will be called when\r\n *                   - the deepest key in source object is reached\r\n *                   - the value of the deepest key is NOT `undefined` | `null`\r\n *\r\n * @example\r\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\r\n * // ['palette', 'primary', 'main'] '#000000'\r\n */\r\n\r\nexport const walkObjectDeep = (obj, callback) => {\r\n  function recurse(object, parentKeys = []) {\r\n    Object.entries(object).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null) {\r\n        if (typeof value === 'object' && Object.keys(value).length > 0) {\r\n          recurse(value, [...parentKeys, key]);\r\n        } else {\r\n          callback([...parentKeys, key], value, object);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  recurse(obj);\r\n};\r\n\r\nconst getCssValue = (keys, value) => {\r\n  if (typeof value === 'number') {\r\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {\r\n      // css property that are unitless\r\n      return value;\r\n    }\r\n\r\n    return `${value}px`;\r\n  }\r\n\r\n  return value;\r\n};\r\n/**\r\n * a function that parse theme and return { css, vars }\r\n *\r\n * @param {Object} theme\r\n * @param {{\r\n *  prefix?: string,\r\n *  basePrefix?: string,\r\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\r\n * }} options.\r\n *  `basePrefix`: defined by design system.\r\n *  `prefix`: defined by application\r\n *\r\n *   This function also mutate the string value of theme input by replacing `basePrefix` (if existed) with `prefix`\r\n *\r\n * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme)\r\n *\r\n * @example\r\n * const { css, vars } = parser({\r\n *   fontSize: 12,\r\n *   lineHeight: 1.2,\r\n *   palette: { primary: { 500: '#000000' } }\r\n * })\r\n *\r\n * console.log(css) // { '--fontSize': '12px', '--lineHeight': 1.2, '--palette-primary-500': '#000000' }\r\n * console.log(vars) // { fontSize: '--fontSize', lineHeight: '--lineHeight', palette: { primary: { 500: 'var(--palette-primary-500)' } } }\r\n */\r\n\r\n\r\nexport default function cssVarsParser(theme, options) {\r\n  const clonedTheme = _extends({}, theme);\r\n\r\n  delete clonedTheme.vars; // remove 'vars' from the structure\r\n\r\n  const {\r\n    prefix,\r\n    basePrefix = '',\r\n    shouldSkipGeneratingVar\r\n  } = options || {};\r\n  const css = {};\r\n  const vars = {};\r\n  walkObjectDeep(clonedTheme, (keys, val, scope) => {\r\n    if (typeof val === 'string' || typeof val === 'number') {\r\n      let value = val;\r\n\r\n      if (typeof value === 'string' && value.startsWith('var')) {\r\n        // replace the value of the `scope` object with the prefix or remove basePrefix from the value\r\n        value = prefix ? value.replace(basePrefix, prefix) : value.replace(`${basePrefix}-`, ''); // scope is the deepest object in the tree, keys is the theme path keys\r\n\r\n        scope[keys.slice(-1)[0]] = value;\r\n      }\r\n\r\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\r\n        // only create css & var if `shouldSkipGeneratingVar` return false\r\n        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;\r\n        Object.assign(css, {\r\n          [cssVar]: getCssValue(keys, value)\r\n        });\r\n        assignNestedKeys(vars, keys, `var(${cssVar})`);\r\n      }\r\n    }\r\n  });\r\n  return {\r\n    css,\r\n    vars\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}