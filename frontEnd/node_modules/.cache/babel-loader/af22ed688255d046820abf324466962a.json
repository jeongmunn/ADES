{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/jw/OneDrive/Documents/GitHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jw/OneDrive/Documents/GitHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BufferReader = void 0;\nvar emptyBuffer = Buffer.allocUnsafe(0);\n\nvar BufferReader = /*#__PURE__*/function () {\n  function BufferReader() {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    _classCallCheck(this, BufferReader);\n\n    this.offset = offset;\n    this.buffer = emptyBuffer; // TODO(bmc): support non-utf8 encoding?\n\n    this.encoding = 'utf-8';\n  }\n\n  _createClass(BufferReader, [{\n    key: \"setBuffer\",\n    value: function setBuffer(offset, buffer) {\n      this.offset = offset;\n      this.buffer = buffer;\n    }\n  }, {\n    key: \"int16\",\n    value: function int16() {\n      var result = this.buffer.readInt16BE(this.offset);\n      this.offset += 2;\n      return result;\n    }\n  }, {\n    key: \"byte\",\n    value: function byte() {\n      var result = this.buffer[this.offset];\n      this.offset++;\n      return result;\n    }\n  }, {\n    key: \"int32\",\n    value: function int32() {\n      var result = this.buffer.readInt32BE(this.offset);\n      this.offset += 4;\n      return result;\n    }\n  }, {\n    key: \"string\",\n    value: function string(length) {\n      var result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\n      this.offset += length;\n      return result;\n    }\n  }, {\n    key: \"cstring\",\n    value: function cstring() {\n      var start = this.offset;\n      var end = start;\n\n      while (this.buffer[end++] !== 0) {}\n\n      this.offset = end;\n      return this.buffer.toString(this.encoding, start, end - 1);\n    }\n  }, {\n    key: \"bytes\",\n    value: function bytes(length) {\n      var result = this.buffer.slice(this.offset, this.offset + length);\n      this.offset += length;\n      return result;\n    }\n  }]);\n\n  return BufferReader;\n}();\n\nexports.BufferReader = BufferReader;","map":{"version":3,"sources":["../src/buffer-reader.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAM,WAAW,GAAG,MAAM,CAAC,WAAP,CAAmB,CAAnB,CAApB;;IAEa,Y;AAMX,0BAAsC;AAAA,QAAlB,MAAkB,uEAAD,CAAC;;AAAA;;AAAlB,SAAA,MAAA,GAAA,MAAA;AALZ,SAAA,MAAA,GAAiB,WAAjB,CAK8B,CAHtC;;AACQ,SAAA,QAAA,GAAmB,OAAnB;AAEkC;;;;WAEnC,mBAAU,MAAV,EAA0B,MAA1B,EAAwC;AAC7C,WAAK,MAAL,GAAc,MAAd;AACA,WAAK,MAAL,GAAc,MAAd;AACD;;;WAEM,iBAAK;AACV,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,MAA7B,CAAf;AACA,WAAK,MAAL,IAAe,CAAf;AACA,aAAO,MAAP;AACD;;;WAEM,gBAAI;AACT,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,KAAK,MAAjB,CAAf;AACA,WAAK,MAAL;AACA,aAAO,MAAP;AACD;;;WAEM,iBAAK;AACV,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,MAA7B,CAAf;AACA,WAAK,MAAL,IAAe,CAAf;AACA,aAAO,MAAP;AACD;;;WAEM,gBAAO,MAAP,EAAqB;AAC1B,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAAK,QAA1B,EAAoC,KAAK,MAAzC,EAAiD,KAAK,MAAL,GAAc,MAA/D,CAAf;AACA,WAAK,MAAL,IAAe,MAAf;AACA,aAAO,MAAP;AACD;;;WAEM,mBAAO;AACZ,UAAM,KAAK,GAAG,KAAK,MAAnB;AACA,UAAI,GAAG,GAAG,KAAV;;AACA,aAAO,KAAK,MAAL,CAAY,GAAG,EAAf,MAAuB,CAA9B,EAAiC,CAAE;;AACnC,WAAK,MAAL,GAAc,GAAd;AACA,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAAK,QAA1B,EAAoC,KAApC,EAA2C,GAAG,GAAG,CAAjD,CAAP;AACD;;;WAEM,eAAM,MAAN,EAAoB;AACzB,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,MAAvB,EAA+B,KAAK,MAAL,GAAc,MAA7C,CAAf;AACA,WAAK,MAAL,IAAe,MAAf;AACA,aAAO,MAAP;AACD;;;;;;AAjDH,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BufferReader = void 0;\r\nconst emptyBuffer = Buffer.allocUnsafe(0);\r\nclass BufferReader {\r\n    constructor(offset = 0) {\r\n        this.offset = offset;\r\n        this.buffer = emptyBuffer;\r\n        // TODO(bmc): support non-utf8 encoding?\r\n        this.encoding = 'utf-8';\r\n    }\r\n    setBuffer(offset, buffer) {\r\n        this.offset = offset;\r\n        this.buffer = buffer;\r\n    }\r\n    int16() {\r\n        const result = this.buffer.readInt16BE(this.offset);\r\n        this.offset += 2;\r\n        return result;\r\n    }\r\n    byte() {\r\n        const result = this.buffer[this.offset];\r\n        this.offset++;\r\n        return result;\r\n    }\r\n    int32() {\r\n        const result = this.buffer.readInt32BE(this.offset);\r\n        this.offset += 4;\r\n        return result;\r\n    }\r\n    string(length) {\r\n        const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\r\n        this.offset += length;\r\n        return result;\r\n    }\r\n    cstring() {\r\n        const start = this.offset;\r\n        let end = start;\r\n        while (this.buffer[end++] !== 0) { }\r\n        this.offset = end;\r\n        return this.buffer.toString(this.encoding, start, end - 1);\r\n    }\r\n    bytes(length) {\r\n        const result = this.buffer.slice(this.offset, this.offset + length);\r\n        this.offset += length;\r\n        return result;\r\n    }\r\n}\r\nexports.BufferReader = BufferReader;\r\n//# sourceMappingURL=buffer-reader.js.map"]},"metadata":{},"sourceType":"script"}