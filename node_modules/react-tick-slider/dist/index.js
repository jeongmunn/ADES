"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var computeCirclePosition = function computeCirclePosition(total, position) {
  return 100 / (total - 1) * position;
};

var computeCirclePositionFromMousePosition = function computeCirclePositionFromMousePosition(mouseX, _ref) {
  var left = _ref.left,
      width = _ref.width;
  return (mouseX - left) / width * 100;
};

var computeChoicesFromOptions = function computeChoicesFromOptions(options) {
  return options.map(function (_ref2, index) {
    var label = _ref2.label,
        value = _ref2.value;
    return {
      label: label,
      position: computeCirclePosition(options.length, index),
      value: value
    };
  });
};

var findChoiceByValue = function findChoiceByValue(choices, value) {
  return choices.find(function (choice) {
    return choice.value === value;
  });
};

var snapBulletPoint = function snapBulletPoint(choices, circlePosition) {
  return choices.reduce(function (min, choice) {
    var distance = Math.abs(circlePosition - choice.position);
    return distance < min.distance ? {
      distance: distance,
      choice: choice
    } : min;
  }, {
    distance: Infinity,
    choice: null
  });
};

var TickSlider =
/*#__PURE__*/
function (_Component) {
  _inherits(TickSlider, _Component);

  function TickSlider(props) {
    var _this;

    _classCallCheck(this, TickSlider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TickSlider).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "selectChoice", function (choice) {
      var selectedChoice = _this.state.selectedChoice;

      if (!selectedChoice || selectedChoice.value !== choice.value) {
        _this.setState({
          selectedChoice: choice
        });

        _this.props.onValueChange(choice.value);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleStop", function (e) {
      var _this$state = _this.state,
          choices = _this$state.choices,
          isDragging = _this$state.isDragging;

      if (!isDragging) {
        return;
      }

      var slidebar = _this.slidebarElement.current.getBoundingClientRect();

      var circlePosition = computeCirclePositionFromMousePosition(e.pageX || e.changedTouches[0].pageX, slidebar);
      var snappedBulletPoint = snapBulletPoint(choices, circlePosition);

      _this.selectChoice(snappedBulletPoint.choice);

      _this.setState({
        isDragging: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMove", function (e) {
      var _this$state2 = _this.state,
          choices = _this$state2.choices,
          isDragging = _this$state2.isDragging;

      if (!isDragging) {
        return;
      }

      var slidebar = _this.slidebarElement.current.getBoundingClientRect();

      var circlePosition = computeCirclePositionFromMousePosition(e.pageX || e.changedTouches[0].pageX, slidebar);
      var snappedBulletPoint = snapBulletPoint(choices, circlePosition);

      _this.selectChoice(snappedBulletPoint.choice);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleStart", function () {
      _this.setState({
        isDragging: true
      });
    });

    _this.slidebarElement = _react.default.createRef();

    var _choices = computeChoicesFromOptions(props.options);

    var _selectedChoice = findChoiceByValue(_choices, props.value);

    _this.state = {
      choices: _choices,
      selectedChoice: _selectedChoice,
      isDragging: false
    };
    return _this;
  }

  _createClass(TickSlider, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref3) {
      var options = _ref3.options,
          value = _ref3.value;
      var newChoices = options ? computeChoicesFromOptions(options) : this.state.choices;
      var newChoice = value ? findChoiceByValue(newChoices, value) : this.state.selectedChoice;
      this.setState({
        choices: newChoices,
        selectedChoice: newChoice
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.isDragging && !prevState.isDragging) {
        document.addEventListener('mousemove', this.handleMove);
        document.addEventListener('touchmove', this.handleMove);
        document.addEventListener('mouseup', this.handleStop);
        document.addEventListener('touchend', this.handleStop);
      } else if (!this.state.isDragging && prevState.isDragging) {
        document.removeEventListener('mousemove', this.handleMove);
        document.removeEventListener('touchmove', this.handleMove);
        document.removeEventListener('mouseup', this.handleStop);
        document.removeEventListener('touchend', this.handleStop);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('mousemove', this.handleMove);
      document.removeEventListener('touchmove', this.handleMove);
      document.removeEventListener('mouseup', this.handleStop);
      document.removeEventListener('touchend', this.handleStop);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state3 = this.state,
          choices = _this$state3.choices,
          selectedChoice = _this$state3.selectedChoice;
      var _this$props = this.props,
          children = _this$props.children,
          rootStyle = _this$props.rootStyle;
      return _react.default.createElement("div", {
        style: rootStyle,
        ref: this.slidebarElement,
        onMouseDown: this.handleStart,
        onTouchStart: this.handleStart
      }, children({
        selectChoice: this.selectChoice,
        selectedChoice: selectedChoice,
        choices: choices
      }));
    }
  }]);

  return TickSlider;
}(_react.Component);

exports.default = TickSlider;

_defineProperty(TickSlider, "propTypes", {
  children: _propTypes.default.func.isRequired,
  onValueChange: _propTypes.default.func,
  rootStyle: _propTypes.default.object,
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    value: _propTypes.default.number
  })),
  value: _propTypes.default.number
});

_defineProperty(TickSlider, "defaultProps", {
  rootStyle: {},
  options: [],
  onValueChange: function onValueChange() {},
  value: null
});